{"version":3,"sources":["cmps/Square.jsx","cmps/BoardControls.jsx","hooks/useLoopSampler.js","cmps/SoundBoard.jsx","index.js"],"names":["Square","song","toggle","className","onClick","isPlaying","icon","baseIcon","BoardControls","playAllSongs","stopAllSongs","useLoopSampler","useState","map","url","audio","Audio","sources","id","songs","setSongs","selectedSongs","setSelectedSongs","addToSongArr","index","currSong","includes","splice","console","log","useEffect","forEach","source","i","play","load","addEventListener","newSongs","removeEventListener","targetIndex","currentIndex","findIndex","setTimeout","selectedSong","pause","SoundBoard","urls","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.533ecad6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = ({ song, toggle }) => {\r\n    return (\r\n        <li className=\"square\">\r\n            <div className=\"sqr\" onClick={toggle}>\r\n                <span className=\"sqr-icon\" >{song.isPlaying ? song.icon : song.baseIcon}</span>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\n\r\nconst BoardControls = ({ playAllSongs, stopAllSongs }) => {\r\n    return (\r\n        <header className=\"app-header flex justify-center\">\r\n            <div className=\"header-container row\">\r\n                <nav className=\"main-nav container flex justify-space align-center\">\r\n                    <div className=\"logo-container\">grooveo</div>\r\n                    <ul className=\"controls-nav\">\r\n                        <li className=\"item nav-item\"> <button onClick={playAllSongs}>Play All</button>\r\n                        </li>\r\n                        <li className=\"item nav-item\"><button onClick={stopAllSongs}>Stop</button></li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default BoardControls;","import { useState, useEffect } from 'react'\r\n\r\nconst useLoopSampler = () => {\r\n    // loop sample urls \r\n    const urls = [\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/1.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/2.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/3.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/4.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/5.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/6.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/7.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/8.mp3',\r\n        'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/9.mp3',\r\n    ]\r\n\r\n    const [sources] = useState(\r\n        urls.map(url => {\r\n            return {\r\n                url,\r\n                audio: new Audio(url),\r\n            }\r\n        }),\r\n    )\r\n\r\n    const [songs, setSongs] = useState([\r\n        {\r\n            id: 1,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/1.mp3',\r\n            baseIcon:'S',\r\n            icon:'A',\r\n            isPlaying: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/2.mp3',\r\n            baseIcon:'Q',\r\n            icon:'B',\r\n            isPlaying: false,\r\n\r\n        },\r\n        {\r\n            id: 3,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/3.mp3',\r\n            baseIcon:'P',\r\n            icon:'C',\r\n            isPlaying: false,\r\n\r\n        },\r\n        {\r\n            id: 4,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/4.mp3',\r\n            baseIcon:'O',\r\n            icon:'D',\r\n            isPlaying: false,\r\n\r\n        },\r\n        {\r\n            id: 5,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/5.mp3',\r\n            baseIcon:'N',\r\n            icon:'E',\r\n            isPlaying: false,\r\n\r\n        },\r\n        {\r\n            id: 6,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/6.mp3',\r\n            baseIcon:'M',\r\n            icon:'F',\r\n            isPlaying: false,\r\n\r\n        }, \r\n        {\r\n            id: 7,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/7.mp3',\r\n            baseIcon:'T',\r\n            icon:'G',\r\n            isPlaying: false,\r\n\r\n        }, \r\n        {\r\n            id: 8,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/8.mp3',\r\n            baseIcon:'K',\r\n            icon:'H',\r\n            isPlaying: false,\r\n\r\n        }, \r\n        {\r\n            id: 9,\r\n            url: 'https://res.cloudinary.com/dk67dcp9c/video/upload/v1638379805/audio/9.mp3',\r\n            baseIcon:'J',\r\n            icon:'I',\r\n            isPlaying: false,\r\n\r\n        }, \r\n\r\n    ]);\r\n\r\n    const [selectedSongs, setSelectedSongs] = useState([]);\r\n\r\n    const toggle = targetIndex => () => {\r\n        // creating a shallow copy of songs array\r\n        const newSongs = [...songs]\r\n        // finding the current index for the playing song \r\n        const currentIndex = songs.findIndex(song => song.isPlaying === true)\r\n        // clicked on a square while another square is playing\r\n        if (currentIndex !== -1 && currentIndex !== targetIndex) {\r\n            // will play the current song \r\n            newSongs[currentIndex].isPlaying = true;\r\n            // will play the next song after current song finishes\r\n            setTimeout(() => {\r\n                newSongs[targetIndex].isPlaying = true;\r\n            }, 4000)\r\n        } else if (currentIndex !== -1) {\r\n            // clicked on a playing square \r\n            newSongs[targetIndex].isPlaying = false;\r\n        } else {\r\n            // clicked on a square while no other song was playing \r\n            newSongs[targetIndex].isPlaying = true;\r\n        }\r\n        addToSongArr(targetIndex)\r\n        setSongs(newSongs)\r\n    }\r\n\r\n    const addToSongArr = (index) => {\r\n        // destructure the songs array and creating a shallow copy of it\r\n        const newSongs = [...sources];\r\n        // finding the current song selected index\r\n        let currSong = newSongs[index];\r\n        // preventing from the same song to be added twice\r\n        if (selectedSongs.includes(currSong)) return;\r\n        // adding the selected song into a selected song array \r\n        selectedSongs.splice(index, 0, currSong);\r\n        setSelectedSongs(selectedSongs);\r\n        console.log(selectedSongs);\r\n    }\r\n\r\n    // TODO: fix PlayAllSongs so they play one after the other\r\n\r\n    const playAllSongs = () => {\r\n        selectedSongs.forEach((selectedSong, i) => {\r\n            songs[i].isPlaying ? selectedSong.audio.pause() : selectedSong.audio.play();\r\n        })\r\n    }\r\n    const stopAllSongs = () => {\r\n        selectedSongs.forEach((selectedSong, i) => {\r\n            songs[i].isPlaying ? selectedSong.audio.pause() : selectedSong.audio.load();\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        sources.forEach((source, i) => {\r\n            // source.audio.loop = true; \r\n            // if state of current song isPlaying then play the song. otherwise reload it\r\n            songs[i].isPlaying ? source.audio.play() : source.audio.load();\r\n        })\r\n    }, [sources, songs])\r\n\r\n    useEffect(() => {\r\n        // add an event listener to each song source that changes state when song is ended. \r\n        sources.forEach((source, i) => {\r\n            source.audio.addEventListener('ended', () => {\r\n                const newSongs = [...songs];\r\n                newSongs[i].isPlaying = false;\r\n                setSongs(newSongs);\r\n            })\r\n        })\r\n        return () => {\r\n            // remove the event listener from each song source  \r\n            sources.forEach((source, i) => {\r\n                source.audio.removeEventListener('ended', () => {\r\n                    const newSongs = [...songs];\r\n                    newSongs[i].isPlaying = false;\r\n                    setSongs(newSongs);\r\n                })\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return [songs, toggle, playAllSongs, stopAllSongs];\r\n}\r\n\r\nexport default useLoopSampler;","import React from 'react';\r\nimport Square from './Square';\r\nimport BoardControls from './BoardControls'\r\nimport useLoopSampler from '../hooks/useLoopSampler';\r\n\r\nconst SoundBoard = ({ urls }) => {\r\n    const [songs, toggle, playAllSongs, stopAllSongs] = useLoopSampler(urls)\r\n\r\n    return (\r\n        <section className=\"sound-board\">\r\n        <BoardControls playAllSongs={playAllSongs} stopAllSongs={stopAllSongs} />\r\n        <div className=\"soundboard-container container\" >\r\n            {songs.map((song, i) => {\r\n                return (\r\n                    <Square key={i} song={song} toggle={toggle(i)} />\r\n                )\r\n            })}\r\n        </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SoundBoard;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/global.scss';\nimport SoundBoard from './cmps/SoundBoard';\n\nReactDOM.render(\n  <SoundBoard />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}